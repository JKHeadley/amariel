// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // User type and identifiers
  type          UserType  @default(X_USER)
  xId           String?   @unique
  username      String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  messages      Message[]
  role          UserRole  @default(user)
}

model Chat {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Chat metadata
  title     String?
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  messages  Message[]
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Message content
  role      Role     @default(USER)
  content   String   @db.Text
  
  // Relations
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

enum UserType {
  ADMIN
  X_USER
}

enum Role {
  USER
  ASSISTANT
  SYSTEM
}

enum UserRole {
  user
  admin
} 