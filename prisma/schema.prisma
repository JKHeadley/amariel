// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // User type and identifiers
  type          UserType  @default(X_USER)
  xId           String?   @unique
  username      String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  messages      Message[]
  role          UserRole  @default(user)
}

enum ChatType {
  GENERAL
  THOUGHT
  X_RESPONSE
}

model Chat {
  id        String    @id @default(cuid())
  type      ChatType  @default(GENERAL)
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Thread structure
  parentId  String?
  parent    Chat?    @relation("ThreadReplies", fields: [parentId], references: [id])
  replies   Chat[]   @relation("ThreadReplies")
  
  // Relations
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[]
  mentions  Mention[]

  // X Context (for X_RESPONSE type chats)
  relatedTweetId String?    @unique  // ID of the tweet being responded to
  relatedTweet   Tweet?     @relation(fields: [relatedTweetId], references: [id])
}

model Message {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  
  // Message content
  role      Role        @default(USER)
  type      MessageType @default(CHAT)
  content   String      @db.Text
  published Boolean     @default(false)
  metadata  Json?
  
  // Relations
  chat      Chat        @relation(fields: [chatId], references: [id])
  chatId    String
  user      User        @relation(fields: [userId], references: [id])
  userId    String
}

model SystemSettings {
  id               String          @id @default(cuid())
  xAutomationMode  XAutomationMode @default(SEMI_AUTOMATIC)
  lastMentionCheck DateTime?
  lastMentionId    String?
  lastTweetCheck   DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Tweet {
  id             String    @id
  text           String
  authorId       String
  createdAt      DateTime
  cachedAt       DateTime  @default(now())
  conversationId String?
  inReplyToId    String?
  metrics        Json      // stores replyCount, retweetCount, likeCount
  published      Boolean   @default(true)
  isMock         Boolean   @default(false)  // Flag for mock tweets
  
  // Relations
  mentions       Mention[]   @relation("TweetMentions")
  refinementChat Chat?       // The chat used to refine the response to this tweet
}

model Mention {
  id             String    @id
  text           String
  authorId       String
  createdAt      DateTime
  cachedAt       DateTime  @default(now())
  conversationId String?
  inReplyToId    String?
  processed      Boolean   @default(false)
  isMock         Boolean   @default(false)  // Flag for mock mentions
  response       Tweet?    @relation("TweetMentions", fields: [responseId], references: [id])
  responseId     String?
  chat           Chat?     @relation(fields: [chatId], references: [id])
  chatId         String?
}

enum UserType {
  ADMIN
  X_USER
}

enum Role {
  USER
  ASSISTANT
  SYSTEM
}

enum UserRole {
  user
  admin
}

enum MessageType {
  CHAT
  THOUGHT
}

enum XAutomationMode {
  AUTOMATIC
  SEMI_AUTOMATIC
} 